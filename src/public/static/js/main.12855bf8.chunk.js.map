{"version":3,"sources":["screens/UnderConstruction.js","App.js","serviceWorker.js","index.js"],"names":["require","UnderConstruction","state","userLanguage","getGooglePlayButton","_this","react_default","a","createElement","href","alt","src","getApplePlayButton","language","detectBrowserLanguage","split","this","setState","translation","text","className","site_under_construction","try_again_later","install_our_app","Component","ru","en","App","screens_UnderConstruction","withCookies","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAEAA,EAAQ,QAoEOC,6MAhEXC,MAAQ,CACJC,aAAc,MAYlBC,oBAAsB,WAClB,MAAmC,OAA5BC,EAAKH,MAAMC,aACdG,EAAAC,EAAAC,cAAA,KAAGC,KAAK,8HAA6HH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,sEAAyBC,IAAI,sCAE3KL,EAAAC,EAAAC,cAAA,KAAGC,KAAK,8HAA6HH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,wBAAwBC,IAAI,yCAIlLC,mBAAqB,WACjB,MAAmC,OAA5BP,EAAKH,MAAMC,aACdG,EAAAC,EAAAC,cAAA,KAAGC,KAAK,wDAAuDH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,0EAAwBC,IAAI,0CAEpGL,EAAAC,EAAAC,cAAA,KAAGC,KAAK,wDAAuDH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,4BAA4BC,IAAI,8HApB5G,IAAIE,EAAWC,MAGE,QAFjBD,EAAWA,EAASE,MAAM,KAAK,MAG3BF,EAAW,MACfG,KAAKC,SAAS,CAAEd,aAAcU,qCAmBzB,IAEGV,EAAiBa,KAAKd,MAAtBC,aAEFe,EAAcC,EAAKhB,GAEzB,OACIG,EAAAC,EAAAC,cAAA,OAAKY,UAAU,WACXd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eACe,KAA5BJ,KAAKd,MAAMC,aAAsB,KAC/BG,EAAAC,EAAAC,cAAA,OAAKY,UAAU,QACXd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,iBACfd,EAAAC,EAAAC,cAAA,MAAIY,UAAU,sBAAsBF,EAAYG,yBAChDf,EAAAC,EAAAC,cAAA,MAAIY,UAAU,cAAcF,EAAYI,iBACxChB,EAAAC,EAAAC,cAAA,MAAIY,UAAU,eAAeF,EAAYK,iBACzCjB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,QACXd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,UAEPJ,KAAKZ,uBAGbE,EAAAC,EAAAC,cAAA,OAAKY,UAAU,SAEPJ,KAAKJ,gCAtDTY,aAqE1BL,EAAO,CACTM,GAAI,CACAJ,wBAAyB,sJACzBC,gBAAiB,yIACjBC,gBAAiB,8KAErBG,GAAI,CACAL,wBAAyB,0BACzBC,gBAAiB,kBACjBC,gBAAiB,0BC3EzBvB,EAAQ,IAER,IAEM2B,mLAOE,OACIrB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OAGcd,EAAAC,EAAAC,cAACoB,EAAD,cAXvBJ,aAoBHK,cAAYF,GCnBPG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.12855bf8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport detectBrowserLanguage from 'detect-browser-language'\nrequire('../styles/UnderContruction.scss');\n\nclass UnderConstruction extends Component {\n\n    state = {\n        userLanguage: \"\"\n    };\n\n    componentDidMount() {\n        let language = detectBrowserLanguage();\n        language = language.split(\"-\")[0];\n        // var language = window.navigator.language || window.navigator.userLanguage;\n        if (language !== 'ru')\n            language = 'en';\n        this.setState({ userLanguage: language })\n    }\n\n    getGooglePlayButton = () => {\n        return this.state.userLanguage === 'ru' ?\n            <a href='https://play.google.com/store/apps/details?id=com.kitkard&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img alt='Доступно в Google Play' src='/images/ru_badge_web_generic.png'/></a>\n            :\n            <a href='https://play.google.com/store/apps/details?id=com.kitkard&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img alt='Get it on Google Play' src='/images/en_badge_web_generic.png'/></a>\n        ;\n    };\n\n    getApplePlayButton = () => {\n        return this.state.userLanguage === 'ru' ?\n            <a href='https://itunes.apple.com/by/app/kitkard/id1286872072'><img alt='Загрузите в App Store' src='/images/download_on_app_store_ru.svg'/></a>\n            :\n            <a href='https://itunes.apple.com/by/app/kitkard/id1286872072'><img alt='Download on The App Store' src='/images/download_on_app_store_en.svg'/></a>\n        ;\n    };\n\n    render() {\n\n        const { userLanguage } = this.state;\n\n        const translation = text[userLanguage];\n\n        return (\n            <div className=\"welcome\">\n                <div className=\"background\"/>\n                { this.state.userLanguage === \"\" ? null :\n                    <div className=\"form\">\n                        <div className=\"kitkard-logo\"/>\n                        <h4 className=\"under-construction\">{translation.site_under_construction}</h4>\n                        <h5 className=\"tray-later\">{translation.try_again_later}</h5>\n                        <h5 className=\"install-app\">{translation.install_our_app}</h5>\n                        <div className=\"apps\">\n                            <div className=\"google\">\n                                {\n                                    this.getGooglePlayButton()\n                                }\n                            </div>\n                            <div className=\"apple\">\n                                {\n                                    this.getApplePlayButton()\n                                }\n                            </div>\n\n                        </div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default UnderConstruction;\n\n\nconst text = {\n    ru: {\n        site_under_construction: \"САЙТ НАХОДИТСЯ В РАЗРАБОТКЕ\",\n        try_again_later: \"Попробуйте зайти позднее\",\n        install_our_app: \"Устанавливайте наше приложение\",\n    },\n    en: {\n        site_under_construction: \"SITE UNDER CONSTRUCTION\",\n        try_again_later: \"Try again later\",\n        install_our_app: \"Install our app\",\n    }\n};\n","import React, { Component } from 'react';\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\n\nimport UnderConstruction from './screens/UnderConstruction';\n\nimport './App.css';\nrequire('./styles/app.scss');\n\nconst UNDER_CONSTRUCTION = true;\n\nclass App extends Component {\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                {\n                    UNDER_CONSTRUCTION ? <UnderConstruction/> :\n                        null\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}